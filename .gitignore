binary search tree pseudo code

//key 3000이상.

typedef struct node{
  node* p, l, r; 
  //node의 부모를 가리킬 포인터 p, 왼쪽 자식 l, 오른쪽 자식 r
  int key;
};

typedef struct root{
  //root노드는 first를 가리키고 있다.
  node* first;
};

root initTree(root t){
  new root temp = null;
}

node treeSearch(root t, int x){
  if(트리가 비어있다면) return null;

  node temp = t.first;

  while(temp != null){
    if(temp.key == key) return temp;
    else if(temp.key > x) temp = temp.l;
    else temp = temp.r;
    } 
  
  return null;
}

node treeInsert(root t, int x){
  new node temp;
  temp.key = x;
  temp.l = temp.r = null;
  
  if(트리가 비어있다면){
    temp.p = null;
    t.first = temp;
    return temp;
  }

  node* ptr = t.first;
  
  while(1){
    //ptr을 통해 삽입될 곳을 찾는다.
    if(ptr.key < key) {
      //ptr의 오른쪽 서브트리에서 삽입해야 하는데, ptr의 오른쪽이 비었다면 현재 ptr의 오른쪽에 삽입하면 된다.
      if(ptr.r == null) break;
      ptr = ptr.r;
    }
    else {
      //ptr의 왼쪽 서브트리에서 삽입해야 하는데, ptr의 왼쪽이 비었다면 현재 ptr의 왼쪽에 삽입하면 된다.
      if(ptr.l == null) break;
      ptr = ptr = ptr.l;
    }
  }

  if(ptr.key < key) ptr.r = temp;
  else ptr.l = temp;

  temp.p = ptr;
  return temp;
}